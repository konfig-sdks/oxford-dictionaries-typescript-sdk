/* tslint:disable */
/* eslint-disable */
/*
Oxford Dictionaries

Oxford Dictionaries, part of the Oxford Language Division, is a leading authority on the English language. It offers a wide range of language resources, including dictionaries, thesauruses, grammar guides, and language learning tools. Oxford Dictionaries provides accurate and up-to-date definitions, word origins, and usage examples to support language comprehension and communication.

The version of the OpenAPI document: 1.11.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Wordlist } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SearchApi - axios parameter creator
 * @export
 */
export const SearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *  Use this to retrieve possible [headword](documentation/glossary?term=headword) matches for a given string of text. The results are culculated using headword matching, fuzzy matching, and [lemmatization](documentation/glossary?term=lemma)     <div id=\"search\"></div> 
         * @summary Retrieve possible matches to input
         * @param {'en' | 'es' | 'hi' | 'lv' | 'sw' | 'ta' | 'gu'} sourceLang IANA language code
         * @param {string} [q] Search string
         * @param {boolean} [prefix] Set prefix to true if you\&#39;d like to get results only starting with search string.
         * @param {string} [regions] If searching in English, filter words with specific region(s) either \&#39;us\&#39; or \&#39;gb\&#39;.
         * @param {string} [limit] Limit the number of results per response. Default and maximum limit is 5000.
         * @param {string} [offset] Offset the start number of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMatches: async (sourceLang: 'en' | 'es' | 'hi' | 'lv' | 'sw' | 'ta' | 'gu', q?: string, prefix?: boolean, regions?: string, limit?: string, offset?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceLang' is not null or undefined
            assertParamExists('getMatches', 'sourceLang', sourceLang)
            const localVarPath = `/search/{source_lang}`
                .replace(`{${"source_lang"}}`, encodeURIComponent(String(sourceLang !== undefined ? sourceLang : `-source_lang-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication appId required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "app_id", keyParamName: "appId", configuration })
            // authentication appKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "app_key", keyParamName: "appKey", configuration })
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (prefix !== undefined) {
                localVarQueryParameter['prefix'] = prefix;
            }

            if (regions !== undefined) {
                localVarQueryParameter['regions'] = regions;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/search/{source_lang}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Use this to find matches in our translation dictionaries.    <div id=\"search_translation\"></div> 
         * @summary Retrieve possible translation matches to input
         * @param {'en' | 'es' | 'nso' | 'zu' | 'ms' | 'id' | 'tn' | 'ur' | 'de' | 'pt'} sourceSearchLanguage IANA language code
         * @param {'es' | 'nso' | 'zu' | 'ms' | 'id' | 'tn' | 'ro' | 'de' | 'pt'} targetSearchLanguage IANA language code
         * @param {string} [q] Search string.
         * @param {boolean} [prefix] Set prefix to true if you\&#39;d like to get results only starting with search string.
         * @param {string} [regions] Filter words with specific region(s) E.g., regions&#x3D;us. For now gb, us are available for en language.
         * @param {string} [limit] Limit the number of results per response. Default and maximum limit is 5000.
         * @param {string} [offset] Offset the start number of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        possibleTranslations: async (sourceSearchLanguage: 'en' | 'es' | 'nso' | 'zu' | 'ms' | 'id' | 'tn' | 'ur' | 'de' | 'pt', targetSearchLanguage: 'es' | 'nso' | 'zu' | 'ms' | 'id' | 'tn' | 'ro' | 'de' | 'pt', q?: string, prefix?: boolean, regions?: string, limit?: string, offset?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceSearchLanguage' is not null or undefined
            assertParamExists('possibleTranslations', 'sourceSearchLanguage', sourceSearchLanguage)
            // verify required parameter 'targetSearchLanguage' is not null or undefined
            assertParamExists('possibleTranslations', 'targetSearchLanguage', targetSearchLanguage)
            const localVarPath = `/search/{source_search_language}/translations={target_search_language}`
                .replace(`{${"source_search_language"}}`, encodeURIComponent(String(sourceSearchLanguage !== undefined ? sourceSearchLanguage : `-source_search_language-`)))
                .replace(`{${"target_search_language"}}`, encodeURIComponent(String(targetSearchLanguage !== undefined ? targetSearchLanguage : `-target_search_language-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication appId required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "app_id", keyParamName: "appId", configuration })
            // authentication appKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "app_key", keyParamName: "appKey", configuration })
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (prefix !== undefined) {
                localVarQueryParameter['prefix'] = prefix;
            }

            if (regions !== undefined) {
                localVarQueryParameter['regions'] = regions;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/search/{source_search_language}/translations={target_search_language}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchApi - functional programming interface
 * @export
 */
export const SearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SearchApiAxiosParamCreator(configuration)
    return {
        /**
         *  Use this to retrieve possible [headword](documentation/glossary?term=headword) matches for a given string of text. The results are culculated using headword matching, fuzzy matching, and [lemmatization](documentation/glossary?term=lemma)     <div id=\"search\"></div> 
         * @summary Retrieve possible matches to input
         * @param {SearchApiGetMatchesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMatches(requestParameters: SearchApiGetMatchesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Wordlist>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMatches(requestParameters.sourceLang, requestParameters.q, requestParameters.prefix, requestParameters.regions, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  Use this to find matches in our translation dictionaries.    <div id=\"search_translation\"></div> 
         * @summary Retrieve possible translation matches to input
         * @param {SearchApiPossibleTranslationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async possibleTranslations(requestParameters: SearchApiPossibleTranslationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Wordlist>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.possibleTranslations(requestParameters.sourceSearchLanguage, requestParameters.targetSearchLanguage, requestParameters.q, requestParameters.prefix, requestParameters.regions, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SearchApi - factory interface
 * @export
 */
export const SearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SearchApiFp(configuration)
    return {
        /**
         *  Use this to retrieve possible [headword](documentation/glossary?term=headword) matches for a given string of text. The results are culculated using headword matching, fuzzy matching, and [lemmatization](documentation/glossary?term=lemma)     <div id=\"search\"></div> 
         * @summary Retrieve possible matches to input
         * @param {SearchApiGetMatchesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMatches(requestParameters: SearchApiGetMatchesRequest, options?: AxiosRequestConfig): AxiosPromise<Wordlist> {
            return localVarFp.getMatches(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         *  Use this to find matches in our translation dictionaries.    <div id=\"search_translation\"></div> 
         * @summary Retrieve possible translation matches to input
         * @param {SearchApiPossibleTranslationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        possibleTranslations(requestParameters: SearchApiPossibleTranslationsRequest, options?: AxiosRequestConfig): AxiosPromise<Wordlist> {
            return localVarFp.possibleTranslations(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getMatches operation in SearchApi.
 * @export
 * @interface SearchApiGetMatchesRequest
 */
export type SearchApiGetMatchesRequest = {
    
    /**
    * IANA language code
    * @type {'en' | 'es' | 'hi' | 'lv' | 'sw' | 'ta' | 'gu'}
    * @memberof SearchApiGetMatches
    */
    readonly sourceLang: 'en' | 'es' | 'hi' | 'lv' | 'sw' | 'ta' | 'gu'
    
    /**
    * Search string
    * @type {string}
    * @memberof SearchApiGetMatches
    */
    readonly q?: string
    
    /**
    * Set prefix to true if you\'d like to get results only starting with search string.
    * @type {boolean}
    * @memberof SearchApiGetMatches
    */
    readonly prefix?: boolean
    
    /**
    * If searching in English, filter words with specific region(s) either \'us\' or \'gb\'.
    * @type {string}
    * @memberof SearchApiGetMatches
    */
    readonly regions?: string
    
    /**
    * Limit the number of results per response. Default and maximum limit is 5000.
    * @type {string}
    * @memberof SearchApiGetMatches
    */
    readonly limit?: string
    
    /**
    * Offset the start number of the result.
    * @type {string}
    * @memberof SearchApiGetMatches
    */
    readonly offset?: string
    
}

/**
 * Request parameters for possibleTranslations operation in SearchApi.
 * @export
 * @interface SearchApiPossibleTranslationsRequest
 */
export type SearchApiPossibleTranslationsRequest = {
    
    /**
    * IANA language code
    * @type {'en' | 'es' | 'nso' | 'zu' | 'ms' | 'id' | 'tn' | 'ur' | 'de' | 'pt'}
    * @memberof SearchApiPossibleTranslations
    */
    readonly sourceSearchLanguage: 'en' | 'es' | 'nso' | 'zu' | 'ms' | 'id' | 'tn' | 'ur' | 'de' | 'pt'
    
    /**
    * IANA language code
    * @type {'es' | 'nso' | 'zu' | 'ms' | 'id' | 'tn' | 'ro' | 'de' | 'pt'}
    * @memberof SearchApiPossibleTranslations
    */
    readonly targetSearchLanguage: 'es' | 'nso' | 'zu' | 'ms' | 'id' | 'tn' | 'ro' | 'de' | 'pt'
    
    /**
    * Search string.
    * @type {string}
    * @memberof SearchApiPossibleTranslations
    */
    readonly q?: string
    
    /**
    * Set prefix to true if you\'d like to get results only starting with search string.
    * @type {boolean}
    * @memberof SearchApiPossibleTranslations
    */
    readonly prefix?: boolean
    
    /**
    * Filter words with specific region(s) E.g., regions=us. For now gb, us are available for en language.
    * @type {string}
    * @memberof SearchApiPossibleTranslations
    */
    readonly regions?: string
    
    /**
    * Limit the number of results per response. Default and maximum limit is 5000.
    * @type {string}
    * @memberof SearchApiPossibleTranslations
    */
    readonly limit?: string
    
    /**
    * Offset the start number of the result.
    * @type {string}
    * @memberof SearchApiPossibleTranslations
    */
    readonly offset?: string
    
}

/**
 * SearchApiGenerated - object-oriented interface
 * @export
 * @class SearchApiGenerated
 * @extends {BaseAPI}
 */
export class SearchApiGenerated extends BaseAPI {
    /**
     *  Use this to retrieve possible [headword](documentation/glossary?term=headword) matches for a given string of text. The results are culculated using headword matching, fuzzy matching, and [lemmatization](documentation/glossary?term=lemma)     <div id=\"search\"></div> 
     * @summary Retrieve possible matches to input
     * @param {SearchApiGetMatchesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiGenerated
     */
    public getMatches(requestParameters: SearchApiGetMatchesRequest, options?: AxiosRequestConfig) {
        return SearchApiFp(this.configuration).getMatches(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  Use this to find matches in our translation dictionaries.    <div id=\"search_translation\"></div> 
     * @summary Retrieve possible translation matches to input
     * @param {SearchApiPossibleTranslationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiGenerated
     */
    public possibleTranslations(requestParameters: SearchApiPossibleTranslationsRequest, options?: AxiosRequestConfig) {
        return SearchApiFp(this.configuration).possibleTranslations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
