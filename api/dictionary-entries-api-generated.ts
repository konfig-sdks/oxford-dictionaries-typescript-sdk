/* tslint:disable */
/* eslint-disable */
/*
Oxford Dictionaries

Oxford Dictionaries, part of the Oxford Language Division, is a leading authority on the English language. It offers a wide range of language resources, including dictionaries, thesauruses, grammar guides, and language learning tools. Oxford Dictionaries provides accurate and up-to-date definitions, word origins, and usage examples to support language comprehension and communication.

The version of the OpenAPI document: 1.11.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { RetrieveEntry } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DictionaryEntriesApi - axios parameter creator
 * @export
 */
export const DictionaryEntriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *  Use filters to limit the [entry](documentation/glossary?term=entry) information that is returned. For example, you may only require definitions and not everything else, or just [pronunciations](documentation/glossary?term=pronunciation). The full list of filters can be retrieved from the filters Utility endpoint. You can also specify values within the filter using \'=\'. For example \'grammaticalFeatures=singular\'. Filters can also be combined using a semicolon.    <div id=\"dictionary_entries_filters\"></div> 
         * @summary Apply filters to response
         * @param {'en' | 'es' | 'lv' | 'hi' | 'sw' | 'ta' | 'gu' | 'fr'} sourceLang IANA language code
         * @param {string} wordId An Entry identifier. Case-sensitive.
         * @param {Array<string>} filters Separate filtering conditions using a semicolon. Conditions take values grammaticalFeatures and/or lexicalCategory and are case-sensitive. To list multiple values in single condition divide them with comma.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyFilters: async (sourceLang: 'en' | 'es' | 'lv' | 'hi' | 'sw' | 'ta' | 'gu' | 'fr', wordId: string, filters: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceLang' is not null or undefined
            assertParamExists('applyFilters', 'sourceLang', sourceLang)
            // verify required parameter 'wordId' is not null or undefined
            assertParamExists('applyFilters', 'wordId', wordId)
            // verify required parameter 'filters' is not null or undefined
            assertParamExists('applyFilters', 'filters', filters)
            const localVarPath = `/entries/{source_lang}/{word_id}/{filters}`
                .replace(`{${"source_lang"}}`, encodeURIComponent(String(sourceLang !== undefined ? sourceLang : `-source_lang-`)))
                .replace(`{${"word_id"}}`, encodeURIComponent(String(wordId !== undefined ? wordId : `-word_id-`)))
                .replace(`{${"filters"}}`, encodeURIComponent(String(filters !== undefined ? filters : `-filters-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication appId required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "app_id", keyParamName: "appId", configuration })
            // authentication appKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "app_key", keyParamName: "appKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/entries/{source_lang}/{word_id}/{filters}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Use this to retrieve definitions, [pronunciations](documentation/glossary?term=pronunciation), example sentences, [grammatical information](documentation/glossary?term=grammaticalfeatures) and [word origins](documentation/glossary?term=etymology). It only works for dictionary [headwords](documentation/glossary?term=headword), so you may need to use the [Lemmatron](documentation/glossary?term=lemma) first if your input is likely to be an [inflected](documentation/glossary?term=inflection) form (e.g., \'swimming\'). This would return the linked [headword](documentation/glossary?term=headword) (e.g., \'swim\') which you can then use in the Entries endpoint. Unless specified using a region filter, the default lookup will be the Oxford Dictionary of English (GB).    <div id=\"dictionary_entries\"></div> 
         * @summary Retrieve dictionary information for a given word
         * @param {'en' | 'es' | 'lv' | 'hi' | 'sw' | 'ta' | 'gu' | 'fr'} sourceLang IANA language code
         * @param {string} wordId An Entry identifier. Case-sensitive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInformation: async (sourceLang: 'en' | 'es' | 'lv' | 'hi' | 'sw' | 'ta' | 'gu' | 'fr', wordId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceLang' is not null or undefined
            assertParamExists('getInformation', 'sourceLang', sourceLang)
            // verify required parameter 'wordId' is not null or undefined
            assertParamExists('getInformation', 'wordId', wordId)
            const localVarPath = `/entries/{source_lang}/{word_id}`
                .replace(`{${"source_lang"}}`, encodeURIComponent(String(sourceLang !== undefined ? sourceLang : `-source_lang-`)))
                .replace(`{${"word_id"}}`, encodeURIComponent(String(wordId !== undefined ? wordId : `-word_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication appId required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "app_id", keyParamName: "appId", configuration })
            // authentication appKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "app_key", keyParamName: "appKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/entries/{source_lang}/{word_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  USe this filter to restrict the lookup to either our Oxford Dictionary of English (GB) or New Oxford American Dictionary (US). 
         * @summary Specify GB or US dictionary for English entry search
         * @param {'en'} sourceLang IANA language code
         * @param {string} wordId An Entry identifier. Case-sensitive.
         * @param {'gb' | 'us'} region Region filter parameter. gb &#x3D; Oxford Dictionary of English. us &#x3D; New Oxford American Dictionary.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specifyDictionaryRegion: async (sourceLang: 'en', wordId: string, region: 'gb' | 'us', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceLang' is not null or undefined
            assertParamExists('specifyDictionaryRegion', 'sourceLang', sourceLang)
            // verify required parameter 'wordId' is not null or undefined
            assertParamExists('specifyDictionaryRegion', 'wordId', wordId)
            // verify required parameter 'region' is not null or undefined
            assertParamExists('specifyDictionaryRegion', 'region', region)
            const localVarPath = `/entries/{source_lang}/{word_id}/regions={region}`
                .replace(`{${"source_lang"}}`, encodeURIComponent(String(sourceLang !== undefined ? sourceLang : `-source_lang-`)))
                .replace(`{${"word_id"}}`, encodeURIComponent(String(wordId !== undefined ? wordId : `-word_id-`)))
                .replace(`{${"region"}}`, encodeURIComponent(String(region !== undefined ? region : `-region-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication appId required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "app_id", keyParamName: "appId", configuration })
            // authentication appKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "app_key", keyParamName: "appKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/entries/{source_lang}/{word_id}/regions={region}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DictionaryEntriesApi - functional programming interface
 * @export
 */
export const DictionaryEntriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DictionaryEntriesApiAxiosParamCreator(configuration)
    return {
        /**
         *  Use filters to limit the [entry](documentation/glossary?term=entry) information that is returned. For example, you may only require definitions and not everything else, or just [pronunciations](documentation/glossary?term=pronunciation). The full list of filters can be retrieved from the filters Utility endpoint. You can also specify values within the filter using \'=\'. For example \'grammaticalFeatures=singular\'. Filters can also be combined using a semicolon.    <div id=\"dictionary_entries_filters\"></div> 
         * @summary Apply filters to response
         * @param {DictionaryEntriesApiApplyFiltersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applyFilters(requestParameters: DictionaryEntriesApiApplyFiltersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.applyFilters(requestParameters.sourceLang, requestParameters.wordId, requestParameters.filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  Use this to retrieve definitions, [pronunciations](documentation/glossary?term=pronunciation), example sentences, [grammatical information](documentation/glossary?term=grammaticalfeatures) and [word origins](documentation/glossary?term=etymology). It only works for dictionary [headwords](documentation/glossary?term=headword), so you may need to use the [Lemmatron](documentation/glossary?term=lemma) first if your input is likely to be an [inflected](documentation/glossary?term=inflection) form (e.g., \'swimming\'). This would return the linked [headword](documentation/glossary?term=headword) (e.g., \'swim\') which you can then use in the Entries endpoint. Unless specified using a region filter, the default lookup will be the Oxford Dictionary of English (GB).    <div id=\"dictionary_entries\"></div> 
         * @summary Retrieve dictionary information for a given word
         * @param {DictionaryEntriesApiGetInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInformation(requestParameters: DictionaryEntriesApiGetInformationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInformation(requestParameters.sourceLang, requestParameters.wordId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  USe this filter to restrict the lookup to either our Oxford Dictionary of English (GB) or New Oxford American Dictionary (US). 
         * @summary Specify GB or US dictionary for English entry search
         * @param {DictionaryEntriesApiSpecifyDictionaryRegionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async specifyDictionaryRegion(requestParameters: DictionaryEntriesApiSpecifyDictionaryRegionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.specifyDictionaryRegion(requestParameters.sourceLang, requestParameters.wordId, requestParameters.region, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DictionaryEntriesApi - factory interface
 * @export
 */
export const DictionaryEntriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DictionaryEntriesApiFp(configuration)
    return {
        /**
         *  Use filters to limit the [entry](documentation/glossary?term=entry) information that is returned. For example, you may only require definitions and not everything else, or just [pronunciations](documentation/glossary?term=pronunciation). The full list of filters can be retrieved from the filters Utility endpoint. You can also specify values within the filter using \'=\'. For example \'grammaticalFeatures=singular\'. Filters can also be combined using a semicolon.    <div id=\"dictionary_entries_filters\"></div> 
         * @summary Apply filters to response
         * @param {DictionaryEntriesApiApplyFiltersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyFilters(requestParameters: DictionaryEntriesApiApplyFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<RetrieveEntry> {
            return localVarFp.applyFilters(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         *  Use this to retrieve definitions, [pronunciations](documentation/glossary?term=pronunciation), example sentences, [grammatical information](documentation/glossary?term=grammaticalfeatures) and [word origins](documentation/glossary?term=etymology). It only works for dictionary [headwords](documentation/glossary?term=headword), so you may need to use the [Lemmatron](documentation/glossary?term=lemma) first if your input is likely to be an [inflected](documentation/glossary?term=inflection) form (e.g., \'swimming\'). This would return the linked [headword](documentation/glossary?term=headword) (e.g., \'swim\') which you can then use in the Entries endpoint. Unless specified using a region filter, the default lookup will be the Oxford Dictionary of English (GB).    <div id=\"dictionary_entries\"></div> 
         * @summary Retrieve dictionary information for a given word
         * @param {DictionaryEntriesApiGetInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInformation(requestParameters: DictionaryEntriesApiGetInformationRequest, options?: AxiosRequestConfig): AxiosPromise<RetrieveEntry> {
            return localVarFp.getInformation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         *  USe this filter to restrict the lookup to either our Oxford Dictionary of English (GB) or New Oxford American Dictionary (US). 
         * @summary Specify GB or US dictionary for English entry search
         * @param {DictionaryEntriesApiSpecifyDictionaryRegionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specifyDictionaryRegion(requestParameters: DictionaryEntriesApiSpecifyDictionaryRegionRequest, options?: AxiosRequestConfig): AxiosPromise<RetrieveEntry> {
            return localVarFp.specifyDictionaryRegion(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for applyFilters operation in DictionaryEntriesApi.
 * @export
 * @interface DictionaryEntriesApiApplyFiltersRequest
 */
export type DictionaryEntriesApiApplyFiltersRequest = {
    
    /**
    * IANA language code
    * @type {'en' | 'es' | 'lv' | 'hi' | 'sw' | 'ta' | 'gu' | 'fr'}
    * @memberof DictionaryEntriesApiApplyFilters
    */
    readonly sourceLang: 'en' | 'es' | 'lv' | 'hi' | 'sw' | 'ta' | 'gu' | 'fr'
    
    /**
    * An Entry identifier. Case-sensitive.
    * @type {string}
    * @memberof DictionaryEntriesApiApplyFilters
    */
    readonly wordId: string
    
    /**
    * Separate filtering conditions using a semicolon. Conditions take values grammaticalFeatures and/or lexicalCategory and are case-sensitive. To list multiple values in single condition divide them with comma.
    * @type {Array<string>}
    * @memberof DictionaryEntriesApiApplyFilters
    */
    readonly filters: Array<string>
    
}

/**
 * Request parameters for getInformation operation in DictionaryEntriesApi.
 * @export
 * @interface DictionaryEntriesApiGetInformationRequest
 */
export type DictionaryEntriesApiGetInformationRequest = {
    
    /**
    * IANA language code
    * @type {'en' | 'es' | 'lv' | 'hi' | 'sw' | 'ta' | 'gu' | 'fr'}
    * @memberof DictionaryEntriesApiGetInformation
    */
    readonly sourceLang: 'en' | 'es' | 'lv' | 'hi' | 'sw' | 'ta' | 'gu' | 'fr'
    
    /**
    * An Entry identifier. Case-sensitive.
    * @type {string}
    * @memberof DictionaryEntriesApiGetInformation
    */
    readonly wordId: string
    
}

/**
 * Request parameters for specifyDictionaryRegion operation in DictionaryEntriesApi.
 * @export
 * @interface DictionaryEntriesApiSpecifyDictionaryRegionRequest
 */
export type DictionaryEntriesApiSpecifyDictionaryRegionRequest = {
    
    /**
    * IANA language code
    * @type {'en'}
    * @memberof DictionaryEntriesApiSpecifyDictionaryRegion
    */
    readonly sourceLang: 'en'
    
    /**
    * An Entry identifier. Case-sensitive.
    * @type {string}
    * @memberof DictionaryEntriesApiSpecifyDictionaryRegion
    */
    readonly wordId: string
    
    /**
    * Region filter parameter. gb = Oxford Dictionary of English. us = New Oxford American Dictionary.
    * @type {'gb' | 'us'}
    * @memberof DictionaryEntriesApiSpecifyDictionaryRegion
    */
    readonly region: 'gb' | 'us'
    
}

/**
 * DictionaryEntriesApiGenerated - object-oriented interface
 * @export
 * @class DictionaryEntriesApiGenerated
 * @extends {BaseAPI}
 */
export class DictionaryEntriesApiGenerated extends BaseAPI {
    /**
     *  Use filters to limit the [entry](documentation/glossary?term=entry) information that is returned. For example, you may only require definitions and not everything else, or just [pronunciations](documentation/glossary?term=pronunciation). The full list of filters can be retrieved from the filters Utility endpoint. You can also specify values within the filter using \'=\'. For example \'grammaticalFeatures=singular\'. Filters can also be combined using a semicolon.    <div id=\"dictionary_entries_filters\"></div> 
     * @summary Apply filters to response
     * @param {DictionaryEntriesApiApplyFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DictionaryEntriesApiGenerated
     */
    public applyFilters(requestParameters: DictionaryEntriesApiApplyFiltersRequest, options?: AxiosRequestConfig) {
        return DictionaryEntriesApiFp(this.configuration).applyFilters(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  Use this to retrieve definitions, [pronunciations](documentation/glossary?term=pronunciation), example sentences, [grammatical information](documentation/glossary?term=grammaticalfeatures) and [word origins](documentation/glossary?term=etymology). It only works for dictionary [headwords](documentation/glossary?term=headword), so you may need to use the [Lemmatron](documentation/glossary?term=lemma) first if your input is likely to be an [inflected](documentation/glossary?term=inflection) form (e.g., \'swimming\'). This would return the linked [headword](documentation/glossary?term=headword) (e.g., \'swim\') which you can then use in the Entries endpoint. Unless specified using a region filter, the default lookup will be the Oxford Dictionary of English (GB).    <div id=\"dictionary_entries\"></div> 
     * @summary Retrieve dictionary information for a given word
     * @param {DictionaryEntriesApiGetInformationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DictionaryEntriesApiGenerated
     */
    public getInformation(requestParameters: DictionaryEntriesApiGetInformationRequest, options?: AxiosRequestConfig) {
        return DictionaryEntriesApiFp(this.configuration).getInformation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  USe this filter to restrict the lookup to either our Oxford Dictionary of English (GB) or New Oxford American Dictionary (US). 
     * @summary Specify GB or US dictionary for English entry search
     * @param {DictionaryEntriesApiSpecifyDictionaryRegionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DictionaryEntriesApiGenerated
     */
    public specifyDictionaryRegion(requestParameters: DictionaryEntriesApiSpecifyDictionaryRegionRequest, options?: AxiosRequestConfig) {
        return DictionaryEntriesApiFp(this.configuration).specifyDictionaryRegion(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
