/* tslint:disable */
/* eslint-disable */
/*
Oxford Dictionaries

Oxford Dictionaries, part of the Oxford Language Division, is a leading authority on the English language. It offers a wide range of language resources, including dictionaries, thesauruses, grammar guides, and language learning tools. Oxford Dictionaries provides accurate and up-to-date definitions, word origins, and usage examples to support language comprehension and communication.

The version of the OpenAPI document: 1.11.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Thesaurus } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ThesaurusApi - axios parameter creator
 * @export
 */
export const ThesaurusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *  Retrieve words that are opposite in meaning to the input word ([antonym](documentation/glossary?term=thesaurus)).    <div id=\"antonyms\"></div> 
         * @summary Retrieve words that mean the opposite
         * @param {'en'} sourceLang IANA language code
         * @param {string} wordId An Entry identifier. Case-sensitive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAntonyms: async (sourceLang: 'en', wordId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceLang' is not null or undefined
            assertParamExists('getAntonyms', 'sourceLang', sourceLang)
            // verify required parameter 'wordId' is not null or undefined
            assertParamExists('getAntonyms', 'wordId', wordId)
            const localVarPath = `/entries/{source_lang}/{word_id}/antonyms`
                .replace(`{${"source_lang"}}`, encodeURIComponent(String(sourceLang !== undefined ? sourceLang : `-source_lang-`)))
                .replace(`{${"word_id"}}`, encodeURIComponent(String(wordId !== undefined ? wordId : `-word_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication appId required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "app_id", keyParamName: "appId", configuration })
            // authentication appKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "app_key", keyParamName: "appKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/entries/{source_lang}/{word_id}/antonyms',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Use this to retrieve words that are similar in meaning to the input word ([synonym](documentation/glossary?term=synonym)).    <div id=\"synonyms\"></div> 
         * @summary Retrieve words that are similar
         * @param {'en'} sourceLang IANA language code
         * @param {string} wordId An Entry identifier. Case-sensitive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimilarWords: async (sourceLang: 'en', wordId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceLang' is not null or undefined
            assertParamExists('getSimilarWords', 'sourceLang', sourceLang)
            // verify required parameter 'wordId' is not null or undefined
            assertParamExists('getSimilarWords', 'wordId', wordId)
            const localVarPath = `/entries/{source_lang}/{word_id}/synonyms`
                .replace(`{${"source_lang"}}`, encodeURIComponent(String(sourceLang !== undefined ? sourceLang : `-source_lang-`)))
                .replace(`{${"word_id"}}`, encodeURIComponent(String(wordId !== undefined ? wordId : `-word_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication appId required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "app_id", keyParamName: "appId", configuration })
            // authentication appKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "app_key", keyParamName: "appKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/entries/{source_lang}/{word_id}/synonyms',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Retrieve available [synonyms](documentation/glossary?term=thesaurus) and [antonyms](documentation/glossary?term=thesaurus) for a given word and language.     <div id=\"synonyms_and_antonyms\"></div> 
         * @summary Retrieve synonyms and antonyms for a given word
         * @param {'en'} sourceLang IANA language code
         * @param {string} wordId An Entry identifier. Case-sensitive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSynonymsAntonyms: async (sourceLang: 'en', wordId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceLang' is not null or undefined
            assertParamExists('getSynonymsAntonyms', 'sourceLang', sourceLang)
            // verify required parameter 'wordId' is not null or undefined
            assertParamExists('getSynonymsAntonyms', 'wordId', wordId)
            const localVarPath = `/entries/{source_lang}/{word_id}/synonyms;antonyms`
                .replace(`{${"source_lang"}}`, encodeURIComponent(String(sourceLang !== undefined ? sourceLang : `-source_lang-`)))
                .replace(`{${"word_id"}}`, encodeURIComponent(String(wordId !== undefined ? wordId : `-word_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication appId required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "app_id", keyParamName: "appId", configuration })
            // authentication appKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "app_key", keyParamName: "appKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/entries/{source_lang}/{word_id}/synonyms;antonyms',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ThesaurusApi - functional programming interface
 * @export
 */
export const ThesaurusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ThesaurusApiAxiosParamCreator(configuration)
    return {
        /**
         *  Retrieve words that are opposite in meaning to the input word ([antonym](documentation/glossary?term=thesaurus)).    <div id=\"antonyms\"></div> 
         * @summary Retrieve words that mean the opposite
         * @param {ThesaurusApiGetAntonymsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAntonyms(requestParameters: ThesaurusApiGetAntonymsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Thesaurus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAntonyms(requestParameters.sourceLang, requestParameters.wordId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  Use this to retrieve words that are similar in meaning to the input word ([synonym](documentation/glossary?term=synonym)).    <div id=\"synonyms\"></div> 
         * @summary Retrieve words that are similar
         * @param {ThesaurusApiGetSimilarWordsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSimilarWords(requestParameters: ThesaurusApiGetSimilarWordsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Thesaurus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSimilarWords(requestParameters.sourceLang, requestParameters.wordId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  Retrieve available [synonyms](documentation/glossary?term=thesaurus) and [antonyms](documentation/glossary?term=thesaurus) for a given word and language.     <div id=\"synonyms_and_antonyms\"></div> 
         * @summary Retrieve synonyms and antonyms for a given word
         * @param {ThesaurusApiGetSynonymsAntonymsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSynonymsAntonyms(requestParameters: ThesaurusApiGetSynonymsAntonymsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Thesaurus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSynonymsAntonyms(requestParameters.sourceLang, requestParameters.wordId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ThesaurusApi - factory interface
 * @export
 */
export const ThesaurusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ThesaurusApiFp(configuration)
    return {
        /**
         *  Retrieve words that are opposite in meaning to the input word ([antonym](documentation/glossary?term=thesaurus)).    <div id=\"antonyms\"></div> 
         * @summary Retrieve words that mean the opposite
         * @param {ThesaurusApiGetAntonymsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAntonyms(requestParameters: ThesaurusApiGetAntonymsRequest, options?: AxiosRequestConfig): AxiosPromise<Thesaurus> {
            return localVarFp.getAntonyms(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         *  Use this to retrieve words that are similar in meaning to the input word ([synonym](documentation/glossary?term=synonym)).    <div id=\"synonyms\"></div> 
         * @summary Retrieve words that are similar
         * @param {ThesaurusApiGetSimilarWordsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimilarWords(requestParameters: ThesaurusApiGetSimilarWordsRequest, options?: AxiosRequestConfig): AxiosPromise<Thesaurus> {
            return localVarFp.getSimilarWords(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         *  Retrieve available [synonyms](documentation/glossary?term=thesaurus) and [antonyms](documentation/glossary?term=thesaurus) for a given word and language.     <div id=\"synonyms_and_antonyms\"></div> 
         * @summary Retrieve synonyms and antonyms for a given word
         * @param {ThesaurusApiGetSynonymsAntonymsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSynonymsAntonyms(requestParameters: ThesaurusApiGetSynonymsAntonymsRequest, options?: AxiosRequestConfig): AxiosPromise<Thesaurus> {
            return localVarFp.getSynonymsAntonyms(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAntonyms operation in ThesaurusApi.
 * @export
 * @interface ThesaurusApiGetAntonymsRequest
 */
export type ThesaurusApiGetAntonymsRequest = {
    
    /**
    * IANA language code
    * @type {'en'}
    * @memberof ThesaurusApiGetAntonyms
    */
    readonly sourceLang: 'en'
    
    /**
    * An Entry identifier. Case-sensitive.
    * @type {string}
    * @memberof ThesaurusApiGetAntonyms
    */
    readonly wordId: string
    
}

/**
 * Request parameters for getSimilarWords operation in ThesaurusApi.
 * @export
 * @interface ThesaurusApiGetSimilarWordsRequest
 */
export type ThesaurusApiGetSimilarWordsRequest = {
    
    /**
    * IANA language code
    * @type {'en'}
    * @memberof ThesaurusApiGetSimilarWords
    */
    readonly sourceLang: 'en'
    
    /**
    * An Entry identifier. Case-sensitive.
    * @type {string}
    * @memberof ThesaurusApiGetSimilarWords
    */
    readonly wordId: string
    
}

/**
 * Request parameters for getSynonymsAntonyms operation in ThesaurusApi.
 * @export
 * @interface ThesaurusApiGetSynonymsAntonymsRequest
 */
export type ThesaurusApiGetSynonymsAntonymsRequest = {
    
    /**
    * IANA language code
    * @type {'en'}
    * @memberof ThesaurusApiGetSynonymsAntonyms
    */
    readonly sourceLang: 'en'
    
    /**
    * An Entry identifier. Case-sensitive.
    * @type {string}
    * @memberof ThesaurusApiGetSynonymsAntonyms
    */
    readonly wordId: string
    
}

/**
 * ThesaurusApiGenerated - object-oriented interface
 * @export
 * @class ThesaurusApiGenerated
 * @extends {BaseAPI}
 */
export class ThesaurusApiGenerated extends BaseAPI {
    /**
     *  Retrieve words that are opposite in meaning to the input word ([antonym](documentation/glossary?term=thesaurus)).    <div id=\"antonyms\"></div> 
     * @summary Retrieve words that mean the opposite
     * @param {ThesaurusApiGetAntonymsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThesaurusApiGenerated
     */
    public getAntonyms(requestParameters: ThesaurusApiGetAntonymsRequest, options?: AxiosRequestConfig) {
        return ThesaurusApiFp(this.configuration).getAntonyms(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  Use this to retrieve words that are similar in meaning to the input word ([synonym](documentation/glossary?term=synonym)).    <div id=\"synonyms\"></div> 
     * @summary Retrieve words that are similar
     * @param {ThesaurusApiGetSimilarWordsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThesaurusApiGenerated
     */
    public getSimilarWords(requestParameters: ThesaurusApiGetSimilarWordsRequest, options?: AxiosRequestConfig) {
        return ThesaurusApiFp(this.configuration).getSimilarWords(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  Retrieve available [synonyms](documentation/glossary?term=thesaurus) and [antonyms](documentation/glossary?term=thesaurus) for a given word and language.     <div id=\"synonyms_and_antonyms\"></div> 
     * @summary Retrieve synonyms and antonyms for a given word
     * @param {ThesaurusApiGetSynonymsAntonymsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThesaurusApiGenerated
     */
    public getSynonymsAntonyms(requestParameters: ThesaurusApiGetSynonymsAntonymsRequest, options?: AxiosRequestConfig) {
        return ThesaurusApiFp(this.configuration).getSynonymsAntonyms(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
