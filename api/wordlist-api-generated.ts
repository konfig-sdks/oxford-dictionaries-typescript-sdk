/* tslint:disable */
/* eslint-disable */
/*
Oxford Dictionaries

Oxford Dictionaries, part of the Oxford Language Division, is a leading authority on the English language. It offers a wide range of language resources, including dictionaries, thesauruses, grammar guides, and language learning tools. Oxford Dictionaries provides accurate and up-to-date definitions, word origins, and usage examples to support language comprehension and communication.

The version of the OpenAPI document: 1.11.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Wordlist } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * WordlistApi - axios parameter creator
 * @export
 */
export const WordlistApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this to apply more complex filters to the [list of words](documentation/glossary?term=wordlist). For example, you may only want to filter out words for which all [senses](documentation/glossary?term=sense) match the filter, or only its \'prime sense\'. You can also filter by word length or match by substring (prefix).     <div id=\"wordlist_advanced\"></div> 
         * @summary Retrieve list of words for category with advanced options
         * @param {'en' | 'es' | 'hi' | 'lv' | 'sw' | 'ta' | 'gu'} sourceLang IANA language code
         * @param {string} filtersAdvanced Semicolon separated list of wordlist parameters, presented as value pairs: LexicalCategory, domains, regions, registers. Parameters can take comma separated list of values. E.g., lexicalCategory&#x3D;noun,adjective;domains&#x3D;sport. Number of values limited to 5.
         * @param {string} [exclude] Semicolon separated list of parameters-value pairs (same as filters). Excludes headwords that have any senses in specified exclusion attributes (lexical categories, domains, etc.) from results.
         * @param {string} [excludeSenses] Semicolon separated list of parameters-value pairs (same as filters). Excludes only those senses of a particular headword that match specified exclusion attributes (lexical categories, domains, etc.) from results but includes the headword if it has other permitted senses.
         * @param {string} [excludePrimeSenses] Semicolon separated list of parameters-value pairs (same as filters). Excludes a headword only if the primary sense matches the specified exclusion attributes (registers, domains only).
         * @param {string} [wordLength] Parameter to speficy the minimum (&gt;), exact or maximum (&lt;) length of the words required. E.g., &gt;5 - more than 5 chars; &lt;4 - less than 4 chars; &gt;5&lt;10 - from 5 to 10 chars; 3 - exactly 3 chars.
         * @param {string} [prefix] Filter words that start with prefix parameter
         * @param {boolean} [exact] If exact&#x3D;true wordlist returns a list of entries that exactly matches the search string. Otherwise wordlist lists entries that start with prefix string.
         * @param {string} [limit] Limit the number of results per response. Default and maximum limit is 5000.
         * @param {string} [offset] Offset the start number of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdvancedWords: async (sourceLang: 'en' | 'es' | 'hi' | 'lv' | 'sw' | 'ta' | 'gu', filtersAdvanced: string, exclude?: string, excludeSenses?: string, excludePrimeSenses?: string, wordLength?: string, prefix?: string, exact?: boolean, limit?: string, offset?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceLang' is not null or undefined
            assertParamExists('getAdvancedWords', 'sourceLang', sourceLang)
            // verify required parameter 'filtersAdvanced' is not null or undefined
            assertParamExists('getAdvancedWords', 'filtersAdvanced', filtersAdvanced)
            const localVarPath = `/wordlist/{source_lang}/{filters_advanced}`
                .replace(`{${"source_lang"}}`, encodeURIComponent(String(sourceLang !== undefined ? sourceLang : `-source_lang-`)))
                .replace(`{${"filters_advanced"}}`, encodeURIComponent(String(filtersAdvanced !== undefined ? filtersAdvanced : `-filters_advanced-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication appId required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "app_id", keyParamName: "appId", configuration })
            // authentication appKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "app_key", keyParamName: "appKey", configuration })
            if (exclude !== undefined) {
                localVarQueryParameter['exclude'] = exclude;
            }

            if (excludeSenses !== undefined) {
                localVarQueryParameter['exclude_senses'] = excludeSenses;
            }

            if (excludePrimeSenses !== undefined) {
                localVarQueryParameter['exclude_prime_senses'] = excludePrimeSenses;
            }

            if (wordLength !== undefined) {
                localVarQueryParameter['word_length'] = wordLength;
            }

            if (prefix !== undefined) {
                localVarQueryParameter['prefix'] = prefix;
            }

            if (exact !== undefined) {
                localVarQueryParameter['exact'] = exact;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/wordlist/{source_lang}/{filters_advanced}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Use this to retrieve a [list of words](documentation/glossary?term=wordlist) for particular [domain](documentation/glossary?term=domain), [lexical category](documentation/glossary?term=lexicalcategory), [register](documentation/glossary?term=registers) and/or [region](documentation/glossary?term=regions). View the full list of possible filters using the filters Utility endpoint.  The response only includes [headwords](documentation/glossary?term=headword), not all their possible [inflections](documentation/glossary?term=inflection). If you require a full [wordlist](documentation/glossary?term=wordlist) including [inflected forms](documentation/glossary?term=inflection), contact us and we can help.    <div id=\"wordlist\"></div> 
         * @summary Retrieve a list of words in a category
         * @param {'en' | 'es' | 'hi' | 'lv' | 'sw' | 'ta' | 'gu'} sourceLang IANA language code
         * @param {string} filtersBasic Semicolon separated list of wordlist parameters, presented as value pairs: LexicalCategory, domains, regions, registers. Parameters can take comma separated list of values. E.g., lexicalCategory&#x3D;noun,adjective;domains&#x3D;sport. Number of values limited to 5.
         * @param {string} [limit] Limit the number of results per response. Default and maximum limit is 5000.
         * @param {string} [offset] Offset the start number of the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoryWords: async (sourceLang: 'en' | 'es' | 'hi' | 'lv' | 'sw' | 'ta' | 'gu', filtersBasic: string, limit?: string, offset?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceLang' is not null or undefined
            assertParamExists('getCategoryWords', 'sourceLang', sourceLang)
            // verify required parameter 'filtersBasic' is not null or undefined
            assertParamExists('getCategoryWords', 'filtersBasic', filtersBasic)
            const localVarPath = `/wordlist/{source_lang}/{filters_basic}`
                .replace(`{${"source_lang"}}`, encodeURIComponent(String(sourceLang !== undefined ? sourceLang : `-source_lang-`)))
                .replace(`{${"filters_basic"}}`, encodeURIComponent(String(filtersBasic !== undefined ? filtersBasic : `-filters_basic-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication appId required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "app_id", keyParamName: "appId", configuration })
            // authentication appKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "app_key", keyParamName: "appKey", configuration })
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/wordlist/{source_lang}/{filters_basic}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WordlistApi - functional programming interface
 * @export
 */
export const WordlistApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WordlistApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this to apply more complex filters to the [list of words](documentation/glossary?term=wordlist). For example, you may only want to filter out words for which all [senses](documentation/glossary?term=sense) match the filter, or only its \'prime sense\'. You can also filter by word length or match by substring (prefix).     <div id=\"wordlist_advanced\"></div> 
         * @summary Retrieve list of words for category with advanced options
         * @param {WordlistApiGetAdvancedWordsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdvancedWords(requestParameters: WordlistApiGetAdvancedWordsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Wordlist>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdvancedWords(requestParameters.sourceLang, requestParameters.filtersAdvanced, requestParameters.exclude, requestParameters.excludeSenses, requestParameters.excludePrimeSenses, requestParameters.wordLength, requestParameters.prefix, requestParameters.exact, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  Use this to retrieve a [list of words](documentation/glossary?term=wordlist) for particular [domain](documentation/glossary?term=domain), [lexical category](documentation/glossary?term=lexicalcategory), [register](documentation/glossary?term=registers) and/or [region](documentation/glossary?term=regions). View the full list of possible filters using the filters Utility endpoint.  The response only includes [headwords](documentation/glossary?term=headword), not all their possible [inflections](documentation/glossary?term=inflection). If you require a full [wordlist](documentation/glossary?term=wordlist) including [inflected forms](documentation/glossary?term=inflection), contact us and we can help.    <div id=\"wordlist\"></div> 
         * @summary Retrieve a list of words in a category
         * @param {WordlistApiGetCategoryWordsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategoryWords(requestParameters: WordlistApiGetCategoryWordsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Wordlist>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategoryWords(requestParameters.sourceLang, requestParameters.filtersBasic, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WordlistApi - factory interface
 * @export
 */
export const WordlistApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WordlistApiFp(configuration)
    return {
        /**
         * Use this to apply more complex filters to the [list of words](documentation/glossary?term=wordlist). For example, you may only want to filter out words for which all [senses](documentation/glossary?term=sense) match the filter, or only its \'prime sense\'. You can also filter by word length or match by substring (prefix).     <div id=\"wordlist_advanced\"></div> 
         * @summary Retrieve list of words for category with advanced options
         * @param {WordlistApiGetAdvancedWordsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdvancedWords(requestParameters: WordlistApiGetAdvancedWordsRequest, options?: AxiosRequestConfig): AxiosPromise<Wordlist> {
            return localVarFp.getAdvancedWords(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         *  Use this to retrieve a [list of words](documentation/glossary?term=wordlist) for particular [domain](documentation/glossary?term=domain), [lexical category](documentation/glossary?term=lexicalcategory), [register](documentation/glossary?term=registers) and/or [region](documentation/glossary?term=regions). View the full list of possible filters using the filters Utility endpoint.  The response only includes [headwords](documentation/glossary?term=headword), not all their possible [inflections](documentation/glossary?term=inflection). If you require a full [wordlist](documentation/glossary?term=wordlist) including [inflected forms](documentation/glossary?term=inflection), contact us and we can help.    <div id=\"wordlist\"></div> 
         * @summary Retrieve a list of words in a category
         * @param {WordlistApiGetCategoryWordsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoryWords(requestParameters: WordlistApiGetCategoryWordsRequest, options?: AxiosRequestConfig): AxiosPromise<Wordlist> {
            return localVarFp.getCategoryWords(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAdvancedWords operation in WordlistApi.
 * @export
 * @interface WordlistApiGetAdvancedWordsRequest
 */
export type WordlistApiGetAdvancedWordsRequest = {
    
    /**
    * IANA language code
    * @type {'en' | 'es' | 'hi' | 'lv' | 'sw' | 'ta' | 'gu'}
    * @memberof WordlistApiGetAdvancedWords
    */
    readonly sourceLang: 'en' | 'es' | 'hi' | 'lv' | 'sw' | 'ta' | 'gu'
    
    /**
    * Semicolon separated list of wordlist parameters, presented as value pairs: LexicalCategory, domains, regions, registers. Parameters can take comma separated list of values. E.g., lexicalCategory=noun,adjective;domains=sport. Number of values limited to 5.
    * @type {string}
    * @memberof WordlistApiGetAdvancedWords
    */
    readonly filtersAdvanced: string
    
    /**
    * Semicolon separated list of parameters-value pairs (same as filters). Excludes headwords that have any senses in specified exclusion attributes (lexical categories, domains, etc.) from results.
    * @type {string}
    * @memberof WordlistApiGetAdvancedWords
    */
    readonly exclude?: string
    
    /**
    * Semicolon separated list of parameters-value pairs (same as filters). Excludes only those senses of a particular headword that match specified exclusion attributes (lexical categories, domains, etc.) from results but includes the headword if it has other permitted senses.
    * @type {string}
    * @memberof WordlistApiGetAdvancedWords
    */
    readonly excludeSenses?: string
    
    /**
    * Semicolon separated list of parameters-value pairs (same as filters). Excludes a headword only if the primary sense matches the specified exclusion attributes (registers, domains only).
    * @type {string}
    * @memberof WordlistApiGetAdvancedWords
    */
    readonly excludePrimeSenses?: string
    
    /**
    * Parameter to speficy the minimum (>), exact or maximum (<) length of the words required. E.g., >5 - more than 5 chars; <4 - less than 4 chars; >5<10 - from 5 to 10 chars; 3 - exactly 3 chars.
    * @type {string}
    * @memberof WordlistApiGetAdvancedWords
    */
    readonly wordLength?: string
    
    /**
    * Filter words that start with prefix parameter
    * @type {string}
    * @memberof WordlistApiGetAdvancedWords
    */
    readonly prefix?: string
    
    /**
    * If exact=true wordlist returns a list of entries that exactly matches the search string. Otherwise wordlist lists entries that start with prefix string.
    * @type {boolean}
    * @memberof WordlistApiGetAdvancedWords
    */
    readonly exact?: boolean
    
    /**
    * Limit the number of results per response. Default and maximum limit is 5000.
    * @type {string}
    * @memberof WordlistApiGetAdvancedWords
    */
    readonly limit?: string
    
    /**
    * Offset the start number of the result.
    * @type {string}
    * @memberof WordlistApiGetAdvancedWords
    */
    readonly offset?: string
    
}

/**
 * Request parameters for getCategoryWords operation in WordlistApi.
 * @export
 * @interface WordlistApiGetCategoryWordsRequest
 */
export type WordlistApiGetCategoryWordsRequest = {
    
    /**
    * IANA language code
    * @type {'en' | 'es' | 'hi' | 'lv' | 'sw' | 'ta' | 'gu'}
    * @memberof WordlistApiGetCategoryWords
    */
    readonly sourceLang: 'en' | 'es' | 'hi' | 'lv' | 'sw' | 'ta' | 'gu'
    
    /**
    * Semicolon separated list of wordlist parameters, presented as value pairs: LexicalCategory, domains, regions, registers. Parameters can take comma separated list of values. E.g., lexicalCategory=noun,adjective;domains=sport. Number of values limited to 5.
    * @type {string}
    * @memberof WordlistApiGetCategoryWords
    */
    readonly filtersBasic: string
    
    /**
    * Limit the number of results per response. Default and maximum limit is 5000.
    * @type {string}
    * @memberof WordlistApiGetCategoryWords
    */
    readonly limit?: string
    
    /**
    * Offset the start number of the result
    * @type {string}
    * @memberof WordlistApiGetCategoryWords
    */
    readonly offset?: string
    
}

/**
 * WordlistApiGenerated - object-oriented interface
 * @export
 * @class WordlistApiGenerated
 * @extends {BaseAPI}
 */
export class WordlistApiGenerated extends BaseAPI {
    /**
     * Use this to apply more complex filters to the [list of words](documentation/glossary?term=wordlist). For example, you may only want to filter out words for which all [senses](documentation/glossary?term=sense) match the filter, or only its \'prime sense\'. You can also filter by word length or match by substring (prefix).     <div id=\"wordlist_advanced\"></div> 
     * @summary Retrieve list of words for category with advanced options
     * @param {WordlistApiGetAdvancedWordsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordlistApiGenerated
     */
    public getAdvancedWords(requestParameters: WordlistApiGetAdvancedWordsRequest, options?: AxiosRequestConfig) {
        return WordlistApiFp(this.configuration).getAdvancedWords(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  Use this to retrieve a [list of words](documentation/glossary?term=wordlist) for particular [domain](documentation/glossary?term=domain), [lexical category](documentation/glossary?term=lexicalcategory), [register](documentation/glossary?term=registers) and/or [region](documentation/glossary?term=regions). View the full list of possible filters using the filters Utility endpoint.  The response only includes [headwords](documentation/glossary?term=headword), not all their possible [inflections](documentation/glossary?term=inflection). If you require a full [wordlist](documentation/glossary?term=wordlist) including [inflected forms](documentation/glossary?term=inflection), contact us and we can help.    <div id=\"wordlist\"></div> 
     * @summary Retrieve a list of words in a category
     * @param {WordlistApiGetCategoryWordsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordlistApiGenerated
     */
    public getCategoryWords(requestParameters: WordlistApiGetCategoryWordsRequest, options?: AxiosRequestConfig) {
        return WordlistApiFp(this.configuration).getCategoryWords(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
