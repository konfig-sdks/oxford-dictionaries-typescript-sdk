/* tslint:disable */
/* eslint-disable */
/*
Oxford Dictionaries

Oxford Dictionaries, part of the Oxford Language Division, is a leading authority on the English language. It offers a wide range of language resources, including dictionaries, thesauruses, grammar guides, and language learning tools. Oxford Dictionaries provides accurate and up-to-date definitions, word origins, and usage examples to support language comprehension and communication.

The version of the OpenAPI document: 1.11.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Filters } from '../models';
// @ts-ignore
import { Languages } from '../models';
// @ts-ignore
import { Regions } from '../models';
// @ts-ignore
import { UtilityLabels } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * UtilityApi - axios parameter creator
 * @export
 */
export const UtilityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a list of the available [grammatical features](documentation/glossary?term=grammaticalfeatures) for a given language dataset. 
         * @summary Lists available grammatical features in a dataset
         * @param {'en' | 'es' | 'lv' | 'nso' | 'zu' | 'ms' | 'tn' | 'ur' | 'hi' | 'sw' | 'de' | 'pt' | 'ta' | 'gu'} sourceLanguage IANA language code. If provided output will be filtered by sourceLanguage.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGrammaticalFeatures: async (sourceLanguage: 'en' | 'es' | 'lv' | 'nso' | 'zu' | 'ms' | 'tn' | 'ur' | 'hi' | 'sw' | 'de' | 'pt' | 'ta' | 'gu', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceLanguage' is not null or undefined
            assertParamExists('getGrammaticalFeatures', 'sourceLanguage', sourceLanguage)
            const localVarPath = `/grammaticalFeatures/{source_language}`
                .replace(`{${"source_language"}}`, encodeURIComponent(String(sourceLanguage !== undefined ? sourceLanguage : `-source_language-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication appId required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "app_id", keyParamName: "appId", configuration })
            // authentication appKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "app_key", keyParamName: "appKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/grammaticalFeatures/{source_language}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of available [lexical categories](documentation/glossary?term=lexicalcategory) for a given language dataset. 
         * @summary Lists available lexical categories in a dataset
         * @param {'es' | 'en' | 'lv' | 'nso' | 'zu' | 'ms' | 'id' | 'tn' | 'ur' | 'hi' | 'sw' | 'ro' | 'de' | 'pt' | 'ta' | 'gu'} language IANA language code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLexicalCategories: async (language: 'es' | 'en' | 'lv' | 'nso' | 'zu' | 'ms' | 'id' | 'tn' | 'ur' | 'hi' | 'sw' | 'ro' | 'de' | 'pt' | 'ta' | 'gu', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('getLexicalCategories', 'language', language)
            const localVarPath = `/lexicalcategories/{language}`
                .replace(`{${"language"}}`, encodeURIComponent(String(language !== undefined ? language : `-language-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication appId required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "app_id", keyParamName: "appId", configuration })
            // authentication appKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "app_key", keyParamName: "appKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/lexicalcategories/{language}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of the available [domains](documentation/glossary?term=domain) for a given bilingual language dataset. 
         * @summary Lists available domains in a bilingual dataset
         * @param {'en' | 'es' | 'nso' | 'zu' | 'ur' | 'de' | 'pt'} sourceDomainsLanguage IANA language code
         * @param {'es' | 'nso' | 'zu' | 'ms' | 'id' | 'tn' | 'ro' | 'de' | 'pt'} targetDomainsLanguage IANA language code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAvailableDomains: async (sourceDomainsLanguage: 'en' | 'es' | 'nso' | 'zu' | 'ur' | 'de' | 'pt', targetDomainsLanguage: 'es' | 'nso' | 'zu' | 'ms' | 'id' | 'tn' | 'ro' | 'de' | 'pt', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceDomainsLanguage' is not null or undefined
            assertParamExists('listAvailableDomains', 'sourceDomainsLanguage', sourceDomainsLanguage)
            // verify required parameter 'targetDomainsLanguage' is not null or undefined
            assertParamExists('listAvailableDomains', 'targetDomainsLanguage', targetDomainsLanguage)
            const localVarPath = `/domains/{source_domains_language}/{target_domains_language}`
                .replace(`{${"source_domains_language"}}`, encodeURIComponent(String(sourceDomainsLanguage !== undefined ? sourceDomainsLanguage : `-source_domains_language-`)))
                .replace(`{${"target_domains_language"}}`, encodeURIComponent(String(targetDomainsLanguage !== undefined ? targetDomainsLanguage : `-target_domains_language-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication appId required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "app_id", keyParamName: "appId", configuration })
            // authentication appKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "app_key", keyParamName: "appKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/domains/{source_domains_language}/{target_domains_language}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all the valid filters to construct API calls. 
         * @summary Lists available filters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAvailableFilters: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/filters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication appId required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "app_id", keyParamName: "appId", configuration })
            // authentication appKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "app_key", keyParamName: "appKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/filters',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of monolingual and bilingual language datasets available in the API 
         * @summary Lists available dictionaries
         * @param {'es' | 'en' | 'lv' | 'nso' | 'zu' | 'ms' | 'id' | 'tn' | 'ur' | 'hi' | 'sw' | 'ro' | 'de' | 'pt' | 'ta' | 'gu'} [sourceLanguage] IANA language code. If provided output will be filtered by sourceLanguage.
         * @param {'es' | 'en' | 'lv' | 'nso' | 'zu' | 'ms' | 'id' | 'tn' | 'ur' | 'hi' | 'sw' | 'ro'} [targetLanguage] IANA language code. If provided output will be filtered by sourceLanguage.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAvailableLanguages: async (sourceLanguage?: 'es' | 'en' | 'lv' | 'nso' | 'zu' | 'ms' | 'id' | 'tn' | 'ur' | 'hi' | 'sw' | 'ro' | 'de' | 'pt' | 'ta' | 'gu', targetLanguage?: 'es' | 'en' | 'lv' | 'nso' | 'zu' | 'ms' | 'id' | 'tn' | 'ur' | 'hi' | 'sw' | 'ro', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/languages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication appId required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "app_id", keyParamName: "appId", configuration })
            // authentication appKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "app_key", keyParamName: "appKey", configuration })
            if (sourceLanguage !== undefined) {
                localVarQueryParameter['sourceLanguage'] = sourceLanguage;
            }

            if (targetLanguage !== undefined) {
                localVarQueryParameter['targetLanguage'] = targetLanguage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/languages',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of the available [registers](documentation/glossary?term=registers) for a given bilingual language dataset. 
         * @summary Lists available registers in a bilingual dataset
         * @param {'en' | 'es' | 'ms' | 'id' | 'ur' | 'de' | 'pt'} sourceRegisterLanguage IANA language code
         * @param {'es' | 'en' | 'nso' | 'zu' | 'ms' | 'id' | 'tn' | 'ro' | 'de' | 'pt'} targetRegisterLanguage IANA language code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBilingualRegisters: async (sourceRegisterLanguage: 'en' | 'es' | 'ms' | 'id' | 'ur' | 'de' | 'pt', targetRegisterLanguage: 'es' | 'en' | 'nso' | 'zu' | 'ms' | 'id' | 'tn' | 'ro' | 'de' | 'pt', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceRegisterLanguage' is not null or undefined
            assertParamExists('listBilingualRegisters', 'sourceRegisterLanguage', sourceRegisterLanguage)
            // verify required parameter 'targetRegisterLanguage' is not null or undefined
            assertParamExists('listBilingualRegisters', 'targetRegisterLanguage', targetRegisterLanguage)
            const localVarPath = `/registers/{source_register_language}/{target_register_language}`
                .replace(`{${"source_register_language"}}`, encodeURIComponent(String(sourceRegisterLanguage !== undefined ? sourceRegisterLanguage : `-source_register_language-`)))
                .replace(`{${"target_register_language"}}`, encodeURIComponent(String(targetRegisterLanguage !== undefined ? targetRegisterLanguage : `-target_register_language-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication appId required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "app_id", keyParamName: "appId", configuration })
            // authentication appKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "app_key", keyParamName: "appKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/registers/{source_register_language}/{target_register_language}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all the valid filters for a given endpoint to construct API calls. 
         * @summary Lists available filters for specific endpoint
         * @param {'entries' | 'inflections' | 'translations'} endpoint Name of the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEndpointFilters: async (endpoint: 'entries' | 'inflections' | 'translations', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'endpoint' is not null or undefined
            assertParamExists('listEndpointFilters', 'endpoint', endpoint)
            const localVarPath = `/filters/{endpoint}`
                .replace(`{${"endpoint"}}`, encodeURIComponent(String(endpoint !== undefined ? endpoint : `-endpoint-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication appId required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "app_id", keyParamName: "appId", configuration })
            // authentication appKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "app_key", keyParamName: "appKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/filters/{endpoint}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of the available [domains](documentation/glossary?term=domain) for a given monolingual language dataset. 
         * @summary Lists available domains in a monolingual dataset
         * @param {'en' | 'es' | 'nso' | 'zu' | 'hi' | 'sw' | 'ur' | 'de' | 'pt' | 'ta' | 'gu'} sourceLanguage IANA language code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMonolingualDomains: async (sourceLanguage: 'en' | 'es' | 'nso' | 'zu' | 'hi' | 'sw' | 'ur' | 'de' | 'pt' | 'ta' | 'gu', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceLanguage' is not null or undefined
            assertParamExists('listMonolingualDomains', 'sourceLanguage', sourceLanguage)
            const localVarPath = `/domains/{source_language}`
                .replace(`{${"source_language"}}`, encodeURIComponent(String(sourceLanguage !== undefined ? sourceLanguage : `-source_language-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication appId required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "app_id", keyParamName: "appId", configuration })
            // authentication appKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "app_key", keyParamName: "appKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/domains/{source_language}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of the available [regions](documentation/glossary?term=regions) for a given monolingual language dataset. 
         * @summary Lists available regions in a monolingual dataset
         * @param {'en'} sourceLanguage IANA language code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMonolingualRegions: async (sourceLanguage: 'en', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceLanguage' is not null or undefined
            assertParamExists('listMonolingualRegions', 'sourceLanguage', sourceLanguage)
            const localVarPath = `/regions/{source_language}`
                .replace(`{${"source_language"}}`, encodeURIComponent(String(sourceLanguage !== undefined ? sourceLanguage : `-source_language-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication appId required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "app_id", keyParamName: "appId", configuration })
            // authentication appKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "app_key", keyParamName: "appKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/regions/{source_language}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of the available [registers](documentation/glossary?term=registers) for a given monolingual language dataset. 
         * @summary Lists available registers in a  monolingual dataset
         * @param {'en' | 'es' | 'hi' | 'id' | 'lv' | 'ms' | 'sw' | 'ur' | 'de' | 'pt' | 'ta' | 'gu'} sourceLanguage IANA language code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMonolingualRegisters: async (sourceLanguage: 'en' | 'es' | 'hi' | 'id' | 'lv' | 'ms' | 'sw' | 'ur' | 'de' | 'pt' | 'ta' | 'gu', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceLanguage' is not null or undefined
            assertParamExists('listMonolingualRegisters', 'sourceLanguage', sourceLanguage)
            const localVarPath = `/registers/{source_language}`
                .replace(`{${"source_language"}}`, encodeURIComponent(String(sourceLanguage !== undefined ? sourceLanguage : `-source_language-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication appId required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "app_id", keyParamName: "appId", configuration })
            // authentication appKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "app_key", keyParamName: "appKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/registers/{source_language}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UtilityApi - functional programming interface
 * @export
 */
export const UtilityApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UtilityApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a list of the available [grammatical features](documentation/glossary?term=grammaticalfeatures) for a given language dataset. 
         * @summary Lists available grammatical features in a dataset
         * @param {UtilityApiGetGrammaticalFeaturesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGrammaticalFeatures(requestParameters: UtilityApiGetGrammaticalFeaturesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UtilityLabels>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGrammaticalFeatures(requestParameters.sourceLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of available [lexical categories](documentation/glossary?term=lexicalcategory) for a given language dataset. 
         * @summary Lists available lexical categories in a dataset
         * @param {UtilityApiGetLexicalCategoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLexicalCategories(requestParameters: UtilityApiGetLexicalCategoriesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UtilityLabels>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLexicalCategories(requestParameters.language, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of the available [domains](documentation/glossary?term=domain) for a given bilingual language dataset. 
         * @summary Lists available domains in a bilingual dataset
         * @param {UtilityApiListAvailableDomainsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAvailableDomains(requestParameters: UtilityApiListAvailableDomainsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UtilityLabels>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAvailableDomains(requestParameters.sourceDomainsLanguage, requestParameters.targetDomainsLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all the valid filters to construct API calls. 
         * @summary Lists available filters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAvailableFilters(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Filters>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAvailableFilters(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of monolingual and bilingual language datasets available in the API 
         * @summary Lists available dictionaries
         * @param {UtilityApiListAvailableLanguagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAvailableLanguages(requestParameters: UtilityApiListAvailableLanguagesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Languages>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAvailableLanguages(requestParameters.sourceLanguage, requestParameters.targetLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of the available [registers](documentation/glossary?term=registers) for a given bilingual language dataset. 
         * @summary Lists available registers in a bilingual dataset
         * @param {UtilityApiListBilingualRegistersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBilingualRegisters(requestParameters: UtilityApiListBilingualRegistersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UtilityLabels>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listBilingualRegisters(requestParameters.sourceRegisterLanguage, requestParameters.targetRegisterLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all the valid filters for a given endpoint to construct API calls. 
         * @summary Lists available filters for specific endpoint
         * @param {UtilityApiListEndpointFiltersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEndpointFilters(requestParameters: UtilityApiListEndpointFiltersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Filters>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEndpointFilters(requestParameters.endpoint, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of the available [domains](documentation/glossary?term=domain) for a given monolingual language dataset. 
         * @summary Lists available domains in a monolingual dataset
         * @param {UtilityApiListMonolingualDomainsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMonolingualDomains(requestParameters: UtilityApiListMonolingualDomainsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UtilityLabels>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMonolingualDomains(requestParameters.sourceLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of the available [regions](documentation/glossary?term=regions) for a given monolingual language dataset. 
         * @summary Lists available regions in a monolingual dataset
         * @param {UtilityApiListMonolingualRegionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMonolingualRegions(requestParameters: UtilityApiListMonolingualRegionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Regions>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMonolingualRegions(requestParameters.sourceLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of the available [registers](documentation/glossary?term=registers) for a given monolingual language dataset. 
         * @summary Lists available registers in a  monolingual dataset
         * @param {UtilityApiListMonolingualRegistersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMonolingualRegisters(requestParameters: UtilityApiListMonolingualRegistersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UtilityLabels>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMonolingualRegisters(requestParameters.sourceLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UtilityApi - factory interface
 * @export
 */
export const UtilityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UtilityApiFp(configuration)
    return {
        /**
         * Returns a list of the available [grammatical features](documentation/glossary?term=grammaticalfeatures) for a given language dataset. 
         * @summary Lists available grammatical features in a dataset
         * @param {UtilityApiGetGrammaticalFeaturesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGrammaticalFeatures(requestParameters: UtilityApiGetGrammaticalFeaturesRequest, options?: AxiosRequestConfig): AxiosPromise<UtilityLabels> {
            return localVarFp.getGrammaticalFeatures(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of available [lexical categories](documentation/glossary?term=lexicalcategory) for a given language dataset. 
         * @summary Lists available lexical categories in a dataset
         * @param {UtilityApiGetLexicalCategoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLexicalCategories(requestParameters: UtilityApiGetLexicalCategoriesRequest, options?: AxiosRequestConfig): AxiosPromise<UtilityLabels> {
            return localVarFp.getLexicalCategories(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of the available [domains](documentation/glossary?term=domain) for a given bilingual language dataset. 
         * @summary Lists available domains in a bilingual dataset
         * @param {UtilityApiListAvailableDomainsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAvailableDomains(requestParameters: UtilityApiListAvailableDomainsRequest, options?: AxiosRequestConfig): AxiosPromise<UtilityLabels> {
            return localVarFp.listAvailableDomains(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all the valid filters to construct API calls. 
         * @summary Lists available filters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAvailableFilters(options?: AxiosRequestConfig): AxiosPromise<Filters> {
            return localVarFp.listAvailableFilters(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of monolingual and bilingual language datasets available in the API 
         * @summary Lists available dictionaries
         * @param {UtilityApiListAvailableLanguagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAvailableLanguages(requestParameters: UtilityApiListAvailableLanguagesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Languages> {
            return localVarFp.listAvailableLanguages(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of the available [registers](documentation/glossary?term=registers) for a given bilingual language dataset. 
         * @summary Lists available registers in a bilingual dataset
         * @param {UtilityApiListBilingualRegistersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBilingualRegisters(requestParameters: UtilityApiListBilingualRegistersRequest, options?: AxiosRequestConfig): AxiosPromise<UtilityLabels> {
            return localVarFp.listBilingualRegisters(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all the valid filters for a given endpoint to construct API calls. 
         * @summary Lists available filters for specific endpoint
         * @param {UtilityApiListEndpointFiltersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEndpointFilters(requestParameters: UtilityApiListEndpointFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<Filters> {
            return localVarFp.listEndpointFilters(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of the available [domains](documentation/glossary?term=domain) for a given monolingual language dataset. 
         * @summary Lists available domains in a monolingual dataset
         * @param {UtilityApiListMonolingualDomainsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMonolingualDomains(requestParameters: UtilityApiListMonolingualDomainsRequest, options?: AxiosRequestConfig): AxiosPromise<UtilityLabels> {
            return localVarFp.listMonolingualDomains(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of the available [regions](documentation/glossary?term=regions) for a given monolingual language dataset. 
         * @summary Lists available regions in a monolingual dataset
         * @param {UtilityApiListMonolingualRegionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMonolingualRegions(requestParameters: UtilityApiListMonolingualRegionsRequest, options?: AxiosRequestConfig): AxiosPromise<Regions> {
            return localVarFp.listMonolingualRegions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of the available [registers](documentation/glossary?term=registers) for a given monolingual language dataset. 
         * @summary Lists available registers in a  monolingual dataset
         * @param {UtilityApiListMonolingualRegistersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMonolingualRegisters(requestParameters: UtilityApiListMonolingualRegistersRequest, options?: AxiosRequestConfig): AxiosPromise<UtilityLabels> {
            return localVarFp.listMonolingualRegisters(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getGrammaticalFeatures operation in UtilityApi.
 * @export
 * @interface UtilityApiGetGrammaticalFeaturesRequest
 */
export type UtilityApiGetGrammaticalFeaturesRequest = {
    
    /**
    * IANA language code. If provided output will be filtered by sourceLanguage.
    * @type {'en' | 'es' | 'lv' | 'nso' | 'zu' | 'ms' | 'tn' | 'ur' | 'hi' | 'sw' | 'de' | 'pt' | 'ta' | 'gu'}
    * @memberof UtilityApiGetGrammaticalFeatures
    */
    readonly sourceLanguage: 'en' | 'es' | 'lv' | 'nso' | 'zu' | 'ms' | 'tn' | 'ur' | 'hi' | 'sw' | 'de' | 'pt' | 'ta' | 'gu'
    
}

/**
 * Request parameters for getLexicalCategories operation in UtilityApi.
 * @export
 * @interface UtilityApiGetLexicalCategoriesRequest
 */
export type UtilityApiGetLexicalCategoriesRequest = {
    
    /**
    * IANA language code
    * @type {'es' | 'en' | 'lv' | 'nso' | 'zu' | 'ms' | 'id' | 'tn' | 'ur' | 'hi' | 'sw' | 'ro' | 'de' | 'pt' | 'ta' | 'gu'}
    * @memberof UtilityApiGetLexicalCategories
    */
    readonly language: 'es' | 'en' | 'lv' | 'nso' | 'zu' | 'ms' | 'id' | 'tn' | 'ur' | 'hi' | 'sw' | 'ro' | 'de' | 'pt' | 'ta' | 'gu'
    
}

/**
 * Request parameters for listAvailableDomains operation in UtilityApi.
 * @export
 * @interface UtilityApiListAvailableDomainsRequest
 */
export type UtilityApiListAvailableDomainsRequest = {
    
    /**
    * IANA language code
    * @type {'en' | 'es' | 'nso' | 'zu' | 'ur' | 'de' | 'pt'}
    * @memberof UtilityApiListAvailableDomains
    */
    readonly sourceDomainsLanguage: 'en' | 'es' | 'nso' | 'zu' | 'ur' | 'de' | 'pt'
    
    /**
    * IANA language code
    * @type {'es' | 'nso' | 'zu' | 'ms' | 'id' | 'tn' | 'ro' | 'de' | 'pt'}
    * @memberof UtilityApiListAvailableDomains
    */
    readonly targetDomainsLanguage: 'es' | 'nso' | 'zu' | 'ms' | 'id' | 'tn' | 'ro' | 'de' | 'pt'
    
}

/**
 * Request parameters for listAvailableLanguages operation in UtilityApi.
 * @export
 * @interface UtilityApiListAvailableLanguagesRequest
 */
export type UtilityApiListAvailableLanguagesRequest = {
    
    /**
    * IANA language code. If provided output will be filtered by sourceLanguage.
    * @type {'es' | 'en' | 'lv' | 'nso' | 'zu' | 'ms' | 'id' | 'tn' | 'ur' | 'hi' | 'sw' | 'ro' | 'de' | 'pt' | 'ta' | 'gu'}
    * @memberof UtilityApiListAvailableLanguages
    */
    readonly sourceLanguage?: 'es' | 'en' | 'lv' | 'nso' | 'zu' | 'ms' | 'id' | 'tn' | 'ur' | 'hi' | 'sw' | 'ro' | 'de' | 'pt' | 'ta' | 'gu'
    
    /**
    * IANA language code. If provided output will be filtered by sourceLanguage.
    * @type {'es' | 'en' | 'lv' | 'nso' | 'zu' | 'ms' | 'id' | 'tn' | 'ur' | 'hi' | 'sw' | 'ro'}
    * @memberof UtilityApiListAvailableLanguages
    */
    readonly targetLanguage?: 'es' | 'en' | 'lv' | 'nso' | 'zu' | 'ms' | 'id' | 'tn' | 'ur' | 'hi' | 'sw' | 'ro'
    
}

/**
 * Request parameters for listBilingualRegisters operation in UtilityApi.
 * @export
 * @interface UtilityApiListBilingualRegistersRequest
 */
export type UtilityApiListBilingualRegistersRequest = {
    
    /**
    * IANA language code
    * @type {'en' | 'es' | 'ms' | 'id' | 'ur' | 'de' | 'pt'}
    * @memberof UtilityApiListBilingualRegisters
    */
    readonly sourceRegisterLanguage: 'en' | 'es' | 'ms' | 'id' | 'ur' | 'de' | 'pt'
    
    /**
    * IANA language code
    * @type {'es' | 'en' | 'nso' | 'zu' | 'ms' | 'id' | 'tn' | 'ro' | 'de' | 'pt'}
    * @memberof UtilityApiListBilingualRegisters
    */
    readonly targetRegisterLanguage: 'es' | 'en' | 'nso' | 'zu' | 'ms' | 'id' | 'tn' | 'ro' | 'de' | 'pt'
    
}

/**
 * Request parameters for listEndpointFilters operation in UtilityApi.
 * @export
 * @interface UtilityApiListEndpointFiltersRequest
 */
export type UtilityApiListEndpointFiltersRequest = {
    
    /**
    * Name of the endpoint.
    * @type {'entries' | 'inflections' | 'translations'}
    * @memberof UtilityApiListEndpointFilters
    */
    readonly endpoint: 'entries' | 'inflections' | 'translations'
    
}

/**
 * Request parameters for listMonolingualDomains operation in UtilityApi.
 * @export
 * @interface UtilityApiListMonolingualDomainsRequest
 */
export type UtilityApiListMonolingualDomainsRequest = {
    
    /**
    * IANA language code
    * @type {'en' | 'es' | 'nso' | 'zu' | 'hi' | 'sw' | 'ur' | 'de' | 'pt' | 'ta' | 'gu'}
    * @memberof UtilityApiListMonolingualDomains
    */
    readonly sourceLanguage: 'en' | 'es' | 'nso' | 'zu' | 'hi' | 'sw' | 'ur' | 'de' | 'pt' | 'ta' | 'gu'
    
}

/**
 * Request parameters for listMonolingualRegions operation in UtilityApi.
 * @export
 * @interface UtilityApiListMonolingualRegionsRequest
 */
export type UtilityApiListMonolingualRegionsRequest = {
    
    /**
    * IANA language code
    * @type {'en'}
    * @memberof UtilityApiListMonolingualRegions
    */
    readonly sourceLanguage: 'en'
    
}

/**
 * Request parameters for listMonolingualRegisters operation in UtilityApi.
 * @export
 * @interface UtilityApiListMonolingualRegistersRequest
 */
export type UtilityApiListMonolingualRegistersRequest = {
    
    /**
    * IANA language code
    * @type {'en' | 'es' | 'hi' | 'id' | 'lv' | 'ms' | 'sw' | 'ur' | 'de' | 'pt' | 'ta' | 'gu'}
    * @memberof UtilityApiListMonolingualRegisters
    */
    readonly sourceLanguage: 'en' | 'es' | 'hi' | 'id' | 'lv' | 'ms' | 'sw' | 'ur' | 'de' | 'pt' | 'ta' | 'gu'
    
}

/**
 * UtilityApiGenerated - object-oriented interface
 * @export
 * @class UtilityApiGenerated
 * @extends {BaseAPI}
 */
export class UtilityApiGenerated extends BaseAPI {
    /**
     * Returns a list of the available [grammatical features](documentation/glossary?term=grammaticalfeatures) for a given language dataset. 
     * @summary Lists available grammatical features in a dataset
     * @param {UtilityApiGetGrammaticalFeaturesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilityApiGenerated
     */
    public getGrammaticalFeatures(requestParameters: UtilityApiGetGrammaticalFeaturesRequest, options?: AxiosRequestConfig) {
        return UtilityApiFp(this.configuration).getGrammaticalFeatures(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of available [lexical categories](documentation/glossary?term=lexicalcategory) for a given language dataset. 
     * @summary Lists available lexical categories in a dataset
     * @param {UtilityApiGetLexicalCategoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilityApiGenerated
     */
    public getLexicalCategories(requestParameters: UtilityApiGetLexicalCategoriesRequest, options?: AxiosRequestConfig) {
        return UtilityApiFp(this.configuration).getLexicalCategories(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of the available [domains](documentation/glossary?term=domain) for a given bilingual language dataset. 
     * @summary Lists available domains in a bilingual dataset
     * @param {UtilityApiListAvailableDomainsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilityApiGenerated
     */
    public listAvailableDomains(requestParameters: UtilityApiListAvailableDomainsRequest, options?: AxiosRequestConfig) {
        return UtilityApiFp(this.configuration).listAvailableDomains(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all the valid filters to construct API calls. 
     * @summary Lists available filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilityApiGenerated
     */
    public listAvailableFilters(options?: AxiosRequestConfig) {
        return UtilityApiFp(this.configuration).listAvailableFilters(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of monolingual and bilingual language datasets available in the API 
     * @summary Lists available dictionaries
     * @param {UtilityApiListAvailableLanguagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilityApiGenerated
     */
    public listAvailableLanguages(requestParameters: UtilityApiListAvailableLanguagesRequest = {}, options?: AxiosRequestConfig) {
        return UtilityApiFp(this.configuration).listAvailableLanguages(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of the available [registers](documentation/glossary?term=registers) for a given bilingual language dataset. 
     * @summary Lists available registers in a bilingual dataset
     * @param {UtilityApiListBilingualRegistersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilityApiGenerated
     */
    public listBilingualRegisters(requestParameters: UtilityApiListBilingualRegistersRequest, options?: AxiosRequestConfig) {
        return UtilityApiFp(this.configuration).listBilingualRegisters(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all the valid filters for a given endpoint to construct API calls. 
     * @summary Lists available filters for specific endpoint
     * @param {UtilityApiListEndpointFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilityApiGenerated
     */
    public listEndpointFilters(requestParameters: UtilityApiListEndpointFiltersRequest, options?: AxiosRequestConfig) {
        return UtilityApiFp(this.configuration).listEndpointFilters(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of the available [domains](documentation/glossary?term=domain) for a given monolingual language dataset. 
     * @summary Lists available domains in a monolingual dataset
     * @param {UtilityApiListMonolingualDomainsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilityApiGenerated
     */
    public listMonolingualDomains(requestParameters: UtilityApiListMonolingualDomainsRequest, options?: AxiosRequestConfig) {
        return UtilityApiFp(this.configuration).listMonolingualDomains(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of the available [regions](documentation/glossary?term=regions) for a given monolingual language dataset. 
     * @summary Lists available regions in a monolingual dataset
     * @param {UtilityApiListMonolingualRegionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilityApiGenerated
     */
    public listMonolingualRegions(requestParameters: UtilityApiListMonolingualRegionsRequest, options?: AxiosRequestConfig) {
        return UtilityApiFp(this.configuration).listMonolingualRegions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of the available [registers](documentation/glossary?term=registers) for a given monolingual language dataset. 
     * @summary Lists available registers in a  monolingual dataset
     * @param {UtilityApiListMonolingualRegistersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilityApiGenerated
     */
    public listMonolingualRegisters(requestParameters: UtilityApiListMonolingualRegistersRequest, options?: AxiosRequestConfig) {
        return UtilityApiFp(this.configuration).listMonolingualRegisters(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
