/* tslint:disable */
/* eslint-disable */
/*
Oxford Dictionaries

Oxford Dictionaries, part of the Oxford Language Division, is a leading authority on the English language. It offers a wide range of language resources, including dictionaries, thesauruses, grammar guides, and language learning tools. Oxford Dictionaries provides accurate and up-to-date definitions, word origins, and usage examples to support language comprehension and communication.

The version of the OpenAPI document: 1.11.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Lemmatron } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LemmatronApi - axios parameter creator
 * @export
 */
export const LemmatronApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *  Use this to check if a word exists in the dictionary, or what \'root\' form it links to (e.g., swimming > swim). The response tells you the possible [lemmas](documentation/glossary?term=lemma) for a given [inflected](documentation/glossary?term=inflection) word. This can then be combined with other endpoints to retrieve more information.    <div id=\"lemmatron\"></div> 
         * @summary Check a word exists in the dictionary and retrieve its root form
         * @param {'en' | 'es' | 'hi' | 'nso' | 'tn' | 'zu' | 'de' | 'pt'} sourceLang IANA language code
         * @param {Array<string>} filters Separate filtering conditions using a semicolon. Conditions take values grammaticalFeatures and/or lexicalCategory and are case-sensitive. To list multiple values in single condition divide them with comma.
         * @param {string} wordId The input word
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkAndRetrieveRootForm: async (sourceLang: 'en' | 'es' | 'hi' | 'nso' | 'tn' | 'zu' | 'de' | 'pt', filters: Array<string>, wordId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceLang' is not null or undefined
            assertParamExists('checkAndRetrieveRootForm', 'sourceLang', sourceLang)
            // verify required parameter 'filters' is not null or undefined
            assertParamExists('checkAndRetrieveRootForm', 'filters', filters)
            // verify required parameter 'wordId' is not null or undefined
            assertParamExists('checkAndRetrieveRootForm', 'wordId', wordId)
            const localVarPath = `/inflections/{source_lang}/{word_id}/{filters}`
                .replace(`{${"source_lang"}}`, encodeURIComponent(String(sourceLang !== undefined ? sourceLang : `-source_lang-`)))
                .replace(`{${"filters"}}`, encodeURIComponent(String(filters !== undefined ? filters : `-filters-`)))
                .replace(`{${"word_id"}}`, encodeURIComponent(String(wordId !== undefined ? wordId : `-word_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication appId required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "app_id", keyParamName: "appId", configuration })
            // authentication appKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "app_key", keyParamName: "appKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/inflections/{source_lang}/{word_id}/{filters}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LemmatronApi - functional programming interface
 * @export
 */
export const LemmatronApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LemmatronApiAxiosParamCreator(configuration)
    return {
        /**
         *  Use this to check if a word exists in the dictionary, or what \'root\' form it links to (e.g., swimming > swim). The response tells you the possible [lemmas](documentation/glossary?term=lemma) for a given [inflected](documentation/glossary?term=inflection) word. This can then be combined with other endpoints to retrieve more information.    <div id=\"lemmatron\"></div> 
         * @summary Check a word exists in the dictionary and retrieve its root form
         * @param {LemmatronApiCheckAndRetrieveRootFormRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkAndRetrieveRootForm(requestParameters: LemmatronApiCheckAndRetrieveRootFormRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Lemmatron>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkAndRetrieveRootForm(requestParameters.sourceLang, requestParameters.filters, requestParameters.wordId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LemmatronApi - factory interface
 * @export
 */
export const LemmatronApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LemmatronApiFp(configuration)
    return {
        /**
         *  Use this to check if a word exists in the dictionary, or what \'root\' form it links to (e.g., swimming > swim). The response tells you the possible [lemmas](documentation/glossary?term=lemma) for a given [inflected](documentation/glossary?term=inflection) word. This can then be combined with other endpoints to retrieve more information.    <div id=\"lemmatron\"></div> 
         * @summary Check a word exists in the dictionary and retrieve its root form
         * @param {LemmatronApiCheckAndRetrieveRootFormRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkAndRetrieveRootForm(requestParameters: LemmatronApiCheckAndRetrieveRootFormRequest, options?: AxiosRequestConfig): AxiosPromise<Lemmatron> {
            return localVarFp.checkAndRetrieveRootForm(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for checkAndRetrieveRootForm operation in LemmatronApi.
 * @export
 * @interface LemmatronApiCheckAndRetrieveRootFormRequest
 */
export type LemmatronApiCheckAndRetrieveRootFormRequest = {
    
    /**
    * IANA language code
    * @type {'en' | 'es' | 'hi' | 'nso' | 'tn' | 'zu' | 'de' | 'pt'}
    * @memberof LemmatronApiCheckAndRetrieveRootForm
    */
    readonly sourceLang: 'en' | 'es' | 'hi' | 'nso' | 'tn' | 'zu' | 'de' | 'pt'
    
    /**
    * Separate filtering conditions using a semicolon. Conditions take values grammaticalFeatures and/or lexicalCategory and are case-sensitive. To list multiple values in single condition divide them with comma.
    * @type {Array<string>}
    * @memberof LemmatronApiCheckAndRetrieveRootForm
    */
    readonly filters: Array<string>
    
    /**
    * The input word
    * @type {string}
    * @memberof LemmatronApiCheckAndRetrieveRootForm
    */
    readonly wordId: string
    
}

/**
 * LemmatronApiGenerated - object-oriented interface
 * @export
 * @class LemmatronApiGenerated
 * @extends {BaseAPI}
 */
export class LemmatronApiGenerated extends BaseAPI {
    /**
     *  Use this to check if a word exists in the dictionary, or what \'root\' form it links to (e.g., swimming > swim). The response tells you the possible [lemmas](documentation/glossary?term=lemma) for a given [inflected](documentation/glossary?term=inflection) word. This can then be combined with other endpoints to retrieve more information.    <div id=\"lemmatron\"></div> 
     * @summary Check a word exists in the dictionary and retrieve its root form
     * @param {LemmatronApiCheckAndRetrieveRootFormRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LemmatronApiGenerated
     */
    public checkAndRetrieveRootForm(requestParameters: LemmatronApiCheckAndRetrieveRootFormRequest, options?: AxiosRequestConfig) {
        return LemmatronApiFp(this.configuration).checkAndRetrieveRootForm(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
